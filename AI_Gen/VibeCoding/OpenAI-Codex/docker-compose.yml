services:
  #lazydocker
  codex:
    image: codex-container:latest
    build:
      context: .
      dockerfile: Dockerfile.codex
    # env_file:
    #   - .env
    container_name: codex-container
    working_dir: /app
    volumes:
      #- ./docsold:/app/test #A volume for Codex Container Tests
      #- ./docs:/app/docs #A volume for Codex Container Tests
      - ./orchestrator:/app/orchestrator #A volume for Codex Container Tests
      - ./input-sources:/app/input-sources #DEMO with SDLC SpeedUp
      - ./outputs_model_container:/app/outputs_model #DEMO with SDLC SpeedUp
      #- ${PROJECT_PATH}:/app/Codex-Container #DEMO with SDLC SpeedUp via env
      #- ./<project-repo>:/app/Codex-Container #sample project volume map
    environment:
      - NODE_ENV=development
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    networks:
      - project-network
    tty: true #required to run codex commands on the container
    stdin_open: true
    restart: "no"

#   # Astro Development Server
#   astro-dev:
#     image: node:22.16-alpine3.22 #node:18-alpine
#     container_name: astro-dev
#     working_dir: /app
#     ports:
#       - "4324:4321"  # Astro dev server with live changes port - Go to http://localhost:4324/
#     volumes:
#       - ./docs:/app #this is a common volume for Codex container to place the .md post
#     command: sh -c "cd /app && npm install && npm run dev -- --host 0.0.0.0"
#     environment:
#       - NODE_ENV=development
#     networks:
#       - project-network
#     tty: true
#     restart: "no"



#   astro-prod:
#     image: node:22.16-alpine3.22 #node:18-alpine #docker pull node:22.16-alpine3.22
#     container_name: astro-prod
#     working_dir: /app
#     volumes:
#       - ./docs:/app #this is a common volume for Codex container to place the .md post
#     ports:
#       - "8087:4321"  # Changed to match Astro's default port
#     command: >
#       sh -c "cd /app && 
#       npm install && 
#       npm run build && 
#       npx http-server ./dist -p 4321"
#      #check 2 commands for same container (?) 
#     environment:
#       - NODE_ENV=production
#     networks:
#       - project-network
#     restart: "no"

# networks:
#   project-network:
#     name: project-documentation-network


# #version: '3.8'
# services:
#   app:
#     image: python-codex # Use the image name from your Dockerfile build
#     build: . # Build the image using the Dockerfile in the current directory
#     # volumes:
#     #   - ./app:/app # Mount the current directory to /app in the container
#     volumes:
#       - source_code:/app/your-project # Mount the named volume to /app/your-project in the container    
#     environment:
#       - OPENAI_API_KEY=your-api-key-here # Replace with your actual API key
#     working_dir: /app
#     command: >
#       bash -c "
#       git clone https://github.com/JAlcocerT/Py_Trip_Planner.git /app/your-project &&
#       tail -f /dev/null
#       "    
#     # command: >
#     #   bash -c "
#     #   git clone https://github.com/your-repo/your-project.git /app/your-project &&
#     #   tail -f /dev/null
#     #   "

# volumes:
#   source_code: # Declare the named volume    